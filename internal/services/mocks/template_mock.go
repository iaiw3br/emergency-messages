// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/template.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/template.go -destination internal/services/mocks/template_mock.go
//
// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	models "projects/emergency-messages/internal/models"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplateStore is a mock of TemplateStore interface.
type MockTemplateStore struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateStoreMockRecorder
}

// MockTemplateStoreMockRecorder is the mock recorder for MockTemplateStore.
type MockTemplateStoreMockRecorder struct {
	mock *MockTemplateStore
}

// NewMockTemplateStore creates a new mock instance.
func NewMockTemplateStore(ctrl *gomock.Controller) *MockTemplateStore {
	mock := &MockTemplateStore{ctrl: ctrl}
	mock.recorder = &MockTemplateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateStore) EXPECT() *MockTemplateStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTemplateStore) Create(ctx context.Context, t *models.TemplateEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTemplateStoreMockRecorder) Create(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTemplateStore)(nil).Create), ctx, t)
}

// Delete mocks base method.
func (m *MockTemplateStore) Delete(ctx context.Context, id uuid.UUID, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTemplateStoreMockRecorder) Delete(ctx, id, now any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTemplateStore)(nil).Delete), ctx, id, now)
}

// GetByID mocks base method.
func (m *MockTemplateStore) GetByID(ctx context.Context, id uuid.UUID) (*models.TemplateEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.TemplateEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTemplateStoreMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTemplateStore)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockTemplateStore) Update(ctx context.Context, t *models.TemplateEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTemplateStoreMockRecorder) Update(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTemplateStore)(nil).Update), ctx, t)
}
