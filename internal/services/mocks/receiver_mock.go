// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/receiver.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/receiver.go -destination internal/services/mocks/receiver_mock.go
//
// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	models "projects/emergency-messages/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReceiverStore is a mock of ReceiverStore interface.
type MockReceiverStore struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverStoreMockRecorder
}

// MockReceiverStoreMockRecorder is the mock recorder for MockReceiverStore.
type MockReceiverStoreMockRecorder struct {
	mock *MockReceiverStore
}

// NewMockReceiverStore creates a new mock instance.
func NewMockReceiverStore(ctrl *gomock.Controller) *MockReceiverStore {
	mock := &MockReceiverStore{ctrl: ctrl}
	mock.recorder = &MockReceiverStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiverStore) EXPECT() *MockReceiverStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReceiverStore) Create(ctx context.Context, receiver *models.ReceiverEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReceiverStoreMockRecorder) Create(ctx, receiver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReceiverStore)(nil).Create), ctx, receiver)
}

// FindByCity mocks base method.
func (m *MockReceiverStore) FindByCity(ctx context.Context, city string) ([]models.ReceiverEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCity", ctx, city)
	ret0, _ := ret[0].([]models.ReceiverEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCity indicates an expected call of FindByCity.
func (mr *MockReceiverStoreMockRecorder) FindByCity(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCity", reflect.TypeOf((*MockReceiverStore)(nil).FindByCity), ctx, city)
}
