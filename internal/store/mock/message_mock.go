// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/message.go
//
// Generated by this command:
//
//	mockgen -source=internal/store/message.go -destination internal/store/mock/message_mock.go
//
// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	models "github.com/emergency-messages/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMessager is a mock of Messager interface.
type MockMessager struct {
	ctrl     *gomock.Controller
	recorder *MockMessagerMockRecorder
}

// MockMessagerMockRecorder is the mock recorder for MockMessager.
type MockMessagerMockRecorder struct {
	mock *MockMessager
}

// NewMockMessager creates a new mock instance.
func NewMockMessager(ctrl *gomock.Controller) *MockMessager {
	mock := &MockMessager{ctrl: ctrl}
	mock.recorder = &MockMessagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessager) EXPECT() *MockMessagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessager) Create(ctx context.Context, message models.Message) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, message)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessagerMockRecorder) Create(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessager)(nil).Create), ctx, message)
}

// GetByID mocks base method.
func (m *MockMessager) GetByID(ctx context.Context, id uint64) (*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMessagerMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMessager)(nil).GetByID), ctx, id)
}

// UpdateStatus mocks base method.
func (m *MockMessager) UpdateStatus(ctx context.Context, id uint64, status models.MessageStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockMessagerMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMessager)(nil).UpdateStatus), ctx, id, status)
}
