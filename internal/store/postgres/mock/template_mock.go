// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/template.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/template.go -destination internal/store/postgres/mock/template_mock.go
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "github.com/emergency-messages/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplateStore is a mock of TemplateStore interface.
type MockTemplateStore struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateStoreMockRecorder
}

// MockTemplateStoreMockRecorder is the mock recorder for MockTemplateStore.
type MockTemplateStoreMockRecorder struct {
	mock *MockTemplateStore
}

// NewMockTemplateStore creates a new mock instance.
func NewMockTemplateStore(ctrl *gomock.Controller) *MockTemplateStore {
	mock := &MockTemplateStore{ctrl: ctrl}
	mock.recorder = &MockTemplateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateStore) EXPECT() *MockTemplateStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTemplateStore) Create(ctx context.Context, template *models.TemplateCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTemplateStoreMockRecorder) Create(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTemplateStore)(nil).Create), ctx, template)
}

// Delete mocks base method.
func (m *MockTemplateStore) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTemplateStoreMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTemplateStore)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockTemplateStore) GetByID(ctx context.Context, id string) (*models.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTemplateStoreMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTemplateStore)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockTemplateStore) Update(ctx context.Context, template *models.TemplateUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTemplateStoreMockRecorder) Update(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTemplateStore)(nil).Update), ctx, template)
}
